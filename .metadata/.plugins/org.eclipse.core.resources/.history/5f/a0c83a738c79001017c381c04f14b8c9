/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "quadspi.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "mt25ql512abb.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* DUAL_CORE_BOOT_SYNC_SEQUENCE: Define for dual core boot synchronization    */
/*                             demonstration code based on hardware semaphore */
/* This define is present in both CM7/CM4 projects                            */
/* To comment when developping/debugging on a single core                     */
#define DUAL_CORE_BOOT_SYNC_SEQUENCE

#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int QSPI_Write_Full_Chip(void);
int QSPI_Verify_Full_Chip(void);
int Erase_Test_Flag(void);
int Write_Test_Flag(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Test configuration defines */
#define QSPI_FLASH_SIZE_128MB   (0x8000000) /* 128 MB */
#define QSPI_SECTOR_SIZE_64KB   (0x10000)   /* 64 KB */
#define QSPI_SUBSECTOR_SIZE_4KB (0x1000)    /* 4 KB */
#define QSPI_PAGE_SIZE          (256)       /* 256 Bytes */
#define TEST_BUFFER_SIZE        (256)       /* Test buffer size, same as page size */
#define NUM_SECTORS             (QSPI_FLASH_SIZE_128MB / QSPI_SECTOR_SIZE_64KB)
// Use the LAST sector for the state flag to avoid collision with test data
#define TEST_STATE_FLAG_ADDRESS ((NUM_SECTORS - 1) * QSPI_SECTOR_SIZE_64KB)
#define WRITE_COMPLETE_FLAG     0x5A5A5A5A  // Magic number to indicate write is complete

uint8_t aTxBuffer[TEST_BUFFER_SIZE];
uint8_t aRxBuffer[TEST_BUFFER_SIZE];
MT25QL512ABB_Info_t flashInfo;
uint8_t id[6];

int QSPI_Write_Full_Chip(void)
{
  // 테스트할 64KB 섹터의 수 (예: 1개)
  uint32_t num_sectors_to_test = 1;
  // 64KB 섹터 당 4KB 서브섹터의 수
  uint32_t num_subsectors_per_sector = QSPI_SECTOR_SIZE_64KB / QSPI_SUBSECTOR_SIZE_4KB;
  // 4KB 서브섹터 당 페이지 수
  uint32_t num_pages_per_subsector = QSPI_SUBSECTOR_SIZE_4KB / QSPI_PAGE_SIZE;
  // 전체 테스트 영역에 대한 페이지 인덱스 카운터
  uint32_t total_page_index = 0;

  // --- Iterate through each sector to be tested ---
  for(uint32_t i = 0; i < num_sectors_to_test; i++)
  {
    uint32_t sector_base_addr = i * QSPI_SECTOR_SIZE_64KB;

    // --- Iterate through each 4KB subsector WITHIN the current 64KB sector ---
    for(uint32_t s = 0; s < num_subsectors_per_sector; s++)
    {
        uint32_t subsector_base_addr = sector_base_addr + (s * QSPI_SUBSECTOR_SIZE_4KB);

        // 1. Erase the 4KB subsector ONCE.
        if(MT25QL512ABB_WriteEnable(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
        {
          return 0;
        }
        // Erase 단위를 4K로 변경
        if(MT25QL512ABB_BlockErase(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, subsector_base_addr, MT25QL512ABB_ERASE_4K) != MT25QL512ABB_OK)
        {
          return 0;
        }
        if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
        {
          return 0;
        }

        // 2. Now, iterate through all pages WITHIN that subsector and program them.
        for (uint32_t p = 0; p < num_pages_per_subsector; p++)
        {
            uint32_t current_addr = subsector_base_addr + (p * QSPI_PAGE_SIZE);

            // Prepare unique data for every single page
            for(uint16_t j = 0; j < QSPI_PAGE_SIZE; j++)
            {
              aTxBuffer[j] = (total_page_index + j) & 0xFF;
            }

            // Program the page
            if(MT25QL512ABB_WriteEnable(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
            {
              return 0;
            }
            if(MT25QL512ABB_PageProgram(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, aTxBuffer, current_addr, QSPI_PAGE_SIZE) != MT25QL512ABB_OK)
            {
              return 0;
            }
            if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
            {
              return 0;
            }
            total_page_index++; // Increment for next page
        }
    }
    HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
  }

  return 1; // Success
}

/**
 * @brief Verifies the test pattern across the specified number of sectors (based on 4KB erase).
 * @retval 1 on success, 0 on failure.
 */
int QSPI_Verify_Full_Chip(void)
{
  uint32_t num_sectors_to_test = 1;
  uint32_t num_subsectors_per_sector = QSPI_SECTOR_SIZE_64KB / QSPI_SUBSECTOR_SIZE_4KB;
  uint32_t num_pages_per_subsector = QSPI_SUBSECTOR_SIZE_4KB / QSPI_PAGE_SIZE;
  uint32_t total_page_index = 0;

  for(uint32_t i = 0; i < num_sectors_to_test; i++)
  {
    uint32_t sector_base_addr = i * QSPI_SECTOR_SIZE_64KB;

    for(uint32_t s = 0; s < num_subsectors_per_sector; s++)
    {
        for (uint32_t p = 0; p < num_pages_per_subsector; p++)
        {
            uint32_t current_addr = sector_base_addr + (s * QSPI_SUBSECTOR_SIZE_4KB) + (p * QSPI_PAGE_SIZE);

            // 1. Generate the exact same expected data pattern locally
            for(uint16_t j = 0; j < QSPI_PAGE_SIZE; j++)
            {
              aTxBuffer[j] = (total_page_index + j) & 0xFF;
            }

            // 2. Read data back from flash
            if(MT25QL512ABB_ReadSTR(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, aRxBuffer, current_addr, QSPI_PAGE_SIZE) != MT25QL512ABB_OK)
            {
              return 0;
            }

            // 3. Verify data
            for(uint16_t j = 0; j < QSPI_PAGE_SIZE; j++)
            {
              if(aRxBuffer[j] != aTxBuffer[j])
              {
                return 0; // Failure
              }
            }
            total_page_index++; // Increment for next page
        }
    }
     HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
  }
  return 1; // Success
}

/**
 * @brief Writes the 'Write Complete' flag to its dedicated sector.
 * @retval 1 on success, 0 on failure.
 */
int Write_Test_Flag(void)
{
  uint32_t flag_data = WRITE_COMPLETE_FLAG;

  // Erase the flag sector first
  if(MT25QL512ABB_WriteEnable(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }
  if(MT25QL512ABB_BlockErase(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, TEST_STATE_FLAG_ADDRESS,
      MT25QL512ABB_ERASE_64K) != MT25QL512ABB_OK)
  {
    return 0;
  }
  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }

  // Write the flag
  if(MT25QL512ABB_WriteEnable(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }
  if(MT25QL512ABB_PageProgram(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, (uint8_t*) &flag_data, TEST_STATE_FLAG_ADDRESS,
      sizeof(flag_data)) != MT25QL512ABB_OK)
  {
    return 0;
  }
  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }

  return 1;
}

/**
 * @brief Erases the flash sector dedicated to the test state flag.
 * @retval 1 on success, 0 on failure.
 */
int Erase_Test_Flag(void)
{
  if(MT25QL512ABB_WriteEnable(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }
  // Erase the last 64KB sector, which is dedicated for our flag.
  if(MT25QL512ABB_BlockErase(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, TEST_STATE_FLAG_ADDRESS,
      MT25QL512ABB_ERASE_64K) != MT25QL512ABB_OK)
  {
    return 0;
  }
  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return 0;
  }

  return 1;
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
    ;
  if(timeout < 0)
  {
    Error_Handler();
  }
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
  /* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
   HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
    ;
  if(timeout < 0)
  {
    Error_Handler();
  }
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_QUADSPI_Init();
  /* USER CODE BEGIN 2 */

  int32_t flashStatus = MT25QL512ABB_OK;
  uint32_t test_state_flag = 0;

  flashStatus = MT25QL512ABB_ResetEnable(&hqspi, MT25QL512ABB_QPI_MODE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  flashStatus = MT25QL512ABB_ResetMemory(&hqspi, MT25QL512ABB_QPI_MODE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  flashStatus = MT25QL512ABB_ResetEnable(&hqspi, MT25QL512ABB_SPI_MODE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  flashStatus = MT25QL512ABB_ResetMemory(&hqspi, MT25QL512ABB_SPI_MODE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  /* 1. Enter QPI mode */
  flashStatus = MT25QL512ABB_EnterQPIMode(&hqspi);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  /* 2. Read ID and verify */
  flashStatus = MT25QL512ABB_ReadID(&hqspi, MT25QL512ABB_QPI_MODE, id, MT25QL512ABB_DUALFLASH_ENABLE);
  if((flashStatus != MT25QL512ABB_OK) || (id[0] != 0x20) || (id[1] != 0x20) || (id[2] != 0xBA) || (id[3] != 0xBA) || (id[4] != 0x20)
      || (id[5] != 0x20))
  {
    Error_Handler();
  }

  /* 3. Enter 4-byte address mode */
  flashStatus = MT25QL512ABB_Enter4BytesAddressMode(&hqspi, MT25QL512ABB_QPI_MODE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  /*
  flashStatus = MT25QL512ABB_SetDummyCycles(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE);
  if(flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    Error_Handler();
  }
  */

  /* 4. Read the test state flag from its dedicated address */
  flashStatus = MT25QL512ABB_ReadSTR(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE, (uint8_t*) &test_state_flag, TEST_STATE_FLAG_ADDRESS, sizeof(test_state_flag));
  if( flashStatus != MT25QL512ABB_OK)
  {
    Error_Handler();
  }

  /* 5. Decide whether to WRITE or VERIFY based on the flag */
  if(test_state_flag != WRITE_COMPLETE_FLAG)
  {
    /*****************************************************************/
    /* PHASE 1: WRITE DATA & REBOOT                                  */
    /*****************************************************************/
    // Turn on Yellow LED to indicate writing phase
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);

    if(QSPI_Write_Full_Chip() != 1)
    {
      Error_Handler();
    }

    if(QSPI_Verify_Full_Chip() == 1)
    {
      // Verification successful: Turn on Green LED
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
    }
    else
    {
      // Verification failed: Turn on Red LED
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
    }

    if(Write_Test_Flag() != 1)
    {
      Error_Handler();
    }

    // Write successful, now reboot
    HAL_NVIC_SystemReset();
  }
  else
  {
    /*****************************************************************/
    /* PHASE 2: VERIFY DATA                                          */
    /*****************************************************************/

    if(QSPI_Verify_Full_Chip() == 1)
    {
      // Verification successful: Turn on Green LED
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
    }
    else
    {
      // Verification failed: Turn on Red LED
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
    }

    // Erase the flag to allow the test to run again on the next power cycle,
    // regardless of success or failure.
    if(Erase_Test_Flag() != 1)
    {
      Error_Handler();
    }
  }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct =
  { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
  { 0 };

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
  {
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 64;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
      | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
  {
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); // Red LED ON
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
