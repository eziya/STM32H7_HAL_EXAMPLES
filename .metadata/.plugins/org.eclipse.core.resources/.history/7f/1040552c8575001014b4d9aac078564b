/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file    user_diskio.c
 * @brief   This file includes a diskio driver skeleton to be completed by the user.
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

#ifdef USE_OBSOLETE_USER_CODE_SECTION_0
/*
 * Warning: the user section 0 is no more in use (starting from CubeMx version 4.16.0)
 * To be suppressed in the future.
 * Kept to ensure backward compatibility with previous CubeMx versions when
 * migrating projects.
 * User code previously added there should be copied in the new user sections before
 * the section contents can be deleted.
 */
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */
#endif

/* USER CODE BEGIN DECL */

/* Includes ------------------------------------------------------------------*/
#include <string.h>
#include "ff_gen_drv.h"
#include "quadspi.h"
#include "mt25ql512abb.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

// STM32H747I-DISCO has two 64MB flash chips = 128MB total
#define QSPI_FLASH_TOTAL_SIZE      0x8000000  /* 128 MBytes */
#define QSPI_FLASH_SECTOR_SIZE     4096       /* Using 4KB subsector as the FatFs sector size */
#define QSPI_FLASH_SECTOR_COUNT    (QSPI_FLASH_TOTAL_SIZE / QSPI_FLASH_SECTOR_SIZE)
#define QSPI_FLASH_PAGE_SIZE       256        /* Page size for programming */

/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;

extern QSPI_HandleTypeDef hqspi;

/* USER CODE END DECL */

/* Private function prototypes -----------------------------------------------*/
DSTATUS USER_initialize(BYTE pdrv);
DSTATUS USER_status(BYTE pdrv);
DRESULT USER_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count);
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count);
#endif /* _USE_WRITE == 1 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, BYTE cmd, void *buff);
#endif /* _USE_IOCTL == 1 */

Diskio_drvTypeDef USER_Driver =
{ USER_initialize, USER_status, USER_read,
#if  _USE_WRITE
    USER_write,
#endif  /* _USE_WRITE == 1 */
#if  _USE_IOCTL == 1
    USER_ioctl,
#endif /* _USE_IOCTL == 1 */
    };

/* Private functions ---------------------------------------------------------*/

/**
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
  uint8_t id[6];

  /* We only support drive 0 */
  if(pdrv != 0)
  {
    return STA_NOINIT;
  }

  /* Check if already initialized */
  if((Stat & STA_NOINIT) == 0)
  {
    return Stat;
  }

  /* 1. Enter QPI mode */
  if(MT25QL512ABB_EnterQPIMode(&hqspi) != MT25QL512ABB_OK)
  {
    return STA_NOINIT;
  }

  /* 2. Read ID and verify */
  if(MT25QL512ABB_ReadID(&hqspi, MT25QL512ABB_QPI_MODE, id, MT25QL512ABB_DUALFLASH_ENABLE) != MT25QL512ABB_OK)
  {
    return STA_NOINIT;
  }

  if((id[0] != 0x20) || (id[1] != 0x20) || (id[2] != 0xBA) || (id[3] != 0xBA) || (id[4] != 0x20) || (id[5] != 0x20))
  {
    return STA_NOINIT;
  }

  /* 3. Enter 4-byte address mode */
  if(MT25QL512ABB_Enter4BytesAddressMode(&hqspi, MT25QL512ABB_QPI_MODE) != MT25QL512ABB_OK)
  {
    return STA_NOINIT;
  }

  /* Initialization successful */
  Stat &= ~STA_NOINIT;
  return Stat;
  /* USER CODE END INIT */
}

/**
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
  Stat = STA_NOINIT;

  if(N25Q_GetStatus() == N25Q_OK)
  {
    Stat &= ~STA_NOINIT;
  }

  return Stat;
  /* USER CODE END STATUS */
}

/**
 * @brief  Reads Sector(s)
 * @param  pdrv: Physical drive number (0..)
 * @param  *buff: Data buffer to store read data
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */
DRESULT USER_read(BYTE pdrv, /* Physical drive nmuber to identify the drive */
BYTE *buff, /* Data buffer to store read data */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
  DRESULT res = RES_OK;

  if(count > 1)
  {
    return RES_ERROR;
  }

  if(N25Q_Read(buff, sector * _MIN_SS, _MIN_SS) == N25Q_ERROR)
  {
    res = RES_ERROR;
  }

  return RES_OK;
  /* USER CODE END READ */
}

/**
 * @brief  Writes Sector(s)
 * @param  pdrv: Physical drive number (0..)
 * @param  *buff: Data to be written
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to write (1..128)
 * @retval DRESULT: Operation result
 */
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, /* Physical drive nmuber to identify the drive */
const BYTE *buff, /* Data to be written */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  if(count > 1)
  {
    return RES_ERROR;
  }

  if(N25Q_Erase_Block(sector * _MIN_SS) == N25Q_ERROR)
  {
    res = RES_ERROR;
  }
  else
  {
    if(N25Q_Write((uint8_t*) buff, sector * _MIN_SS, _MIN_SS) == N25Q_ERROR)
    {
      res = RES_ERROR;
    }
  }

  return RES_OK;
  /* USER CODE END WRITE */
}
#endif /* _USE_WRITE == 1 */

/**
 * @brief  I/O control operation
 * @param  pdrv: Physical drive number (0..)
 * @param  cmd: Control code
 * @param  *buff: Buffer to send/receive control data
 * @retval DRESULT: Operation result
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, /* Physical drive nmuber (0..) */
BYTE cmd, /* Control code */
void *buff /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
  DRESULT res = RES_ERROR;

  if(Stat & STA_NOINIT)
  {
    return RES_NOTRDY;
  }

  switch(cmd)
  {
  case CTRL_SYNC:
    res = RES_OK;
    break;
  case GET_SECTOR_COUNT:
    *(uint32_t*) buff = 4096;   //16MB = 4096 * 4096
    res = RES_OK;
    break;
  case GET_SECTOR_SIZE:
    *(uint32_t*) buff = 4096;   //4096B
    break;
  case GET_BLOCK_SIZE:
    *(uint32_t*) buff = 4096;
    break;
  default:
    res = RES_PARERR;
    break;
  }

  return res;
  /* USER CODE END IOCTL */
}
#endif /* _USE_IOCTL == 1 */

